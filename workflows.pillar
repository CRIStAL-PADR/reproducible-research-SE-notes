!! Workflows for researchers (10% Remi, Guillaume)

In this section, we detail example workflows for researchers.

!!! Version control in research
Whenever working on code, packaging and versioning it before even writing the code is good practice. Once you are used to using version control tools, it adds minimum overhead while making collaboration, sharing, and testing much easier later on. Also it has been originally thought for code, we also find version control useful for writing papers. At the extreme, you may want to use version control for pretty much everything, even when you are the only one working locally on a project, so as to keep track of changes, try new features on new branches, etc.

!!! Having private/public remotes
When collaboratively writing a scientific paper, you may want to keep the repositories that contain the source material of the paper and the related code private. You can then turn your repositories public when the paper is released. We note that explicitly sharing the sources of a paper is not yet common practice in all fields, but platforms like Arxiv nowadays strongly recommend it.

There are also situations where researchers may need a private copy of a public repository. For instance, if you work on a toolbox, implementing various existing algorithms that fall under a common flag, while also developing novel algorithms that you may want to add to the toolbox after the related paper has been published. In that case, you may want to have a private copy of the toolbox, and push your changes to the public remote only once the paper describing the novel stuff is published.

Overall, playing with private and public remotes allows researchers to mimic their usual workflow when working on papers and code.

!!! Writing a scientific paper

In that case, your repository contains at least the source text of the paper, and typically also includes figures. As always, it is advised not to include final products such as pdfs in your repository, only source material that allows any user to produce the outputs himself.

We provide an example of such a repository at
*https://github.com/CRIStAL-Sigma/latex-travis-test*
The repository contains a tex file, containing the source of the paper. Tests should make sure that the paper compiles and outputs a pdf with regular latex installations. As we shall see in XXX, we can make this clean by using continuous integration to go further and provide the pdf in a GitHub release.

You can use GitHub versions to mark important steps in the writing of your paper. For researchers, this typically means labeling the version of the paper that was submitted to an outlet, the version that was accepted, and the camera-ready version.
You can also link a version of the paper with other material: code, a submission on another platform like ArXiv, a demo.
Since papers and supplementary material now tend to spend some time online and undergo changes before a final version is printed or permanently stored by journals, it becomes important to label each version of the paper and its material correctly, so that the community can refer to specific versions when commenting on your research.

!!! Packaging scientific code
Your repository contains

!!! Putting it all together: a reproducible paper

!!! Excercises (Guille 0%)
